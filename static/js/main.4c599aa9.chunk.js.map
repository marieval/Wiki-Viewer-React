{"version":3,"sources":["components/Searchwiki.js","components/Searchresult.js","components/Searchresults.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Searchwiki","react_default","a","createElement","className","onSubmit","this","props","formSubmit","type","placeholder","onChange","inputChange","autoFocus","onClick","href","target","rel","Component","Searchresult","concat","title","dangerouslySetInnerHTML","__html","snippet","Searchresults","results","map","item","src_components_Searchresult","key","pageid","Footer","App","state","searchInput","searchResults","errorMessage","errorStyle","display","inputChangeHandler","event","_this","setState","value","inputSubmitHandler","preventDefault","console","log","axios","get","then","wikiData","data","query","search","length","catch","error","newSearchresults","components_Searchresults","src_components_Searchwiki","style","src_components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4c599aa9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Searchwiki.css\";\r\n\r\nclass Searchwiki extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Searchwiki\">\r\n                <h1>Wikipedia Viewer</h1>\r\n                <form onSubmit={this.props.formSubmit}>\r\n                    <input\r\n                        type=\"search\"\r\n                        placeholder=\"Type text to search\"\r\n                        onChange={this.props.inputChange}\r\n                        autoFocus\r\n                    />\r\n                    <button\r\n                        className=\"btn btn--search\"\r\n                        type=\"submit\"\r\n                        onClick={this.props.formSubmit}\r\n                    >Search</button>\r\n                </form>\r\n\r\n                <div>\r\n                    <a href=\"https://en.wikipedia.org/wiki/Special:Random\"\r\n                        target=\"_blank\"\r\n                        rel=\"noopener noreferrer\">\r\n                        <button\r\n                            className=\"btn btn--random\"\r\n                            type=\"submit\">Read a random article</button>\r\n                    </a>\r\n                </div>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nexport default Searchwiki;","import React from \"react\";\r\nimport \"./Searchresult.css\";\r\n\r\n\r\nconst Searchresult = (props) => {\r\n    return (\r\n        <div className=\"Searchresult\">\r\n            <a href={`https://en.wikipedia.org/wiki/${props.title}`} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                <h2>{props.title}</h2>\r\n                <p dangerouslySetInnerHTML={{ __html: `${props.snippet}...` }}></p>\r\n            </a>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Searchresult;\r\n\r\n","import React from \"react\";\r\nimport Searchresult from \"./Searchresult\";\r\n\r\nconst Searchresults = (props) => {\r\n    return (\r\n        <div>\r\n            {\r\n                props.results.map(item => {\r\n                    return (\r\n                        <Searchresult\r\n                            key={item.pageid}\r\n                            title={item.title}\r\n                            snippet={item.snippet}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Searchresults;","import React from \"react\";\r\nimport \"./Footer.css\";\r\n\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <div className=\"Footer\">\r\n            &copy;2019 - Coded by MarieVal. Background image from <a\r\n                href=\"https://pixabay.com/\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\">Pixabay</a>.\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Footer;\r\n\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Searchwiki from \"./components/Searchwiki\";\nimport Searchresults from \"./components/Searchresults\";\nimport Footer from \"./components/Footer\";\nimport axios from \"axios\";\n\nclass App extends Component {\n  state = {\n    searchInput: \"\",\n    searchResults: [],\n    errorMessage: \"\",\n    errorStyle: { display: \"none\" }\n  }\n\n  inputChangeHandler = (event) => {\n    this.setState({ searchInput: event.target.value });\n  }\n\n  inputSubmitHandler = (event) => {\n    event.preventDefault();\n    this.setState({\n      searchInput: \"\",\n      searchResults: [],\n      errorStyle: { display: \"none\" }\n    })\n\n    console.log(\"state.searchInput: \", this.state.searchInput);\n    axios.get(`https://en.wikipedia.org/w/api.php?action=query&list=search&srsearch=${this.state.searchInput}&origin=*&format=json`)\n      .then((wikiData) => {\n        this.setState({\n          searchResults: wikiData.data.query.search\n        })\n        console.log(\"searchResults: \", this.state.searchResults) // FUNGUJE\n\n        if (this.state.searchResults.length === 0) {\n          this.setState({\n            errorMessage: `There were no results matching the query \n            \"${this.state.searchInput}\".`,\n            errorStyle: { display: 'block' }\n          })\n        }\n      })\n      .catch((error) => {\n        this.setState({\n          errorMessage: ' Unable to load Wikipedia search results.',\n          errorStyle: { display: 'block' }\n        });\n      });\n\n\n  }\n\n  render() {\n    let newSearchresults = null;\n    if (this.state.searchResults.length > 0) {\n      console.log(\"render-searchResults > 0 !!!\") // FUNGUJE\n      newSearchresults = (\n        <div>\n          <Searchresults results={this.state.searchResults} />\n        </div>\n      )\n    }\n\n    return (\n      <div className=\"App\">   {/* display: flex, flex-direction: column */}\n        <div className=\"SearchwikiPart\">  {/* flex-grow: 1; */}\n          <Searchwiki\n            formSubmit={this.inputSubmitHandler}\n            inputChange={this.inputChangeHandler}\n          />\n          <div\n            className=\"errorMessage\"\n            style={this.state.errorStyle}\n          >{this.state.errorMessage}\n          </div>\n        </div>\n        {newSearchresults}\n        <Footer />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}